[
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "PC",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "PC_INDEX_NAME",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "LANGFUSE_HOST",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "ProductEmbedding",
        "importPath": "app.models.api.rag_pipeline",
        "description": "app.models.api.rag_pipeline",
        "isExtraImport": true,
        "detail": "app.models.api.rag_pipeline",
        "documentation": {}
    },
    {
        "label": "Vector",
        "importPath": "app.models.api.rag_pipeline",
        "description": "app.models.api.rag_pipeline",
        "isExtraImport": true,
        "detail": "app.models.api.rag_pipeline",
        "documentation": {}
    },
    {
        "label": "VectorMetadata",
        "importPath": "app.models.api.rag_pipeline",
        "description": "app.models.api.rag_pipeline",
        "isExtraImport": true,
        "detail": "app.models.api.rag_pipeline",
        "documentation": {}
    },
    {
        "label": "ErrorResponse",
        "importPath": "app.models.api.rag_pipeline",
        "description": "app.models.api.rag_pipeline",
        "isExtraImport": true,
        "detail": "app.models.api.rag_pipeline",
        "documentation": {}
    },
    {
        "label": "RagPipelineRequestBody",
        "importPath": "app.models.api.rag_pipeline",
        "description": "app.models.api.rag_pipeline",
        "isExtraImport": true,
        "detail": "app.models.api.rag_pipeline",
        "documentation": {}
    },
    {
        "label": "RagPipelineResponse",
        "importPath": "app.models.api.rag_pipeline",
        "description": "app.models.api.rag_pipeline",
        "isExtraImport": true,
        "detail": "app.models.api.rag_pipeline",
        "documentation": {}
    },
    {
        "label": "LLMResponse",
        "importPath": "app.models.api.rag_pipeline",
        "description": "app.models.api.rag_pipeline",
        "isExtraImport": true,
        "detail": "app.models.api.rag_pipeline",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "UniqueConstraint",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "SQLAlchemyError",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.models.api.database",
        "description": "app.models.api.database",
        "isExtraImport": true,
        "detail": "app.models.api.database",
        "documentation": {}
    },
    {
        "label": "Data",
        "importPath": "app.models.api.database",
        "description": "app.models.api.database",
        "isExtraImport": true,
        "detail": "app.models.api.database",
        "documentation": {}
    },
    {
        "label": "DBCollection",
        "importPath": "app.models.api.database",
        "description": "app.models.api.database",
        "isExtraImport": true,
        "detail": "app.models.api.database",
        "documentation": {}
    },
    {
        "label": "DBProduct",
        "importPath": "app.models.api.database",
        "description": "app.models.api.database",
        "isExtraImport": true,
        "detail": "app.models.api.database",
        "documentation": {}
    },
    {
        "label": "Collection",
        "importPath": "app.models.api.store_admin",
        "description": "app.models.api.store_admin",
        "isExtraImport": true,
        "detail": "app.models.api.store_admin",
        "documentation": {}
    },
    {
        "label": "ProductRequest",
        "importPath": "app.models.api.store_admin",
        "description": "app.models.api.store_admin",
        "isExtraImport": true,
        "detail": "app.models.api.store_admin",
        "documentation": {}
    },
    {
        "label": "CollectionRequest",
        "importPath": "app.models.api.store_admin",
        "description": "app.models.api.store_admin",
        "isExtraImport": true,
        "detail": "app.models.api.store_admin",
        "documentation": {}
    },
    {
        "label": "CollectionResponse",
        "importPath": "app.models.api.store_admin",
        "description": "app.models.api.store_admin",
        "isExtraImport": true,
        "detail": "app.models.api.store_admin",
        "documentation": {}
    },
    {
        "label": "ColorPreferenceResponse",
        "importPath": "app.models.api.store_admin",
        "description": "app.models.api.store_admin",
        "isExtraImport": true,
        "detail": "app.models.api.store_admin",
        "documentation": {}
    },
    {
        "label": "ErrorResponse",
        "importPath": "app.models.api.store_admin",
        "description": "app.models.api.store_admin",
        "isExtraImport": true,
        "detail": "app.models.api.store_admin",
        "documentation": {}
    },
    {
        "label": "StoreProductsRequest",
        "importPath": "app.models.api.store_admin",
        "description": "app.models.api.store_admin",
        "isExtraImport": true,
        "detail": "app.models.api.store_admin",
        "documentation": {}
    },
    {
        "label": "StoreProductsResponse",
        "importPath": "app.models.api.store_admin",
        "description": "app.models.api.store_admin",
        "isExtraImport": true,
        "detail": "app.models.api.store_admin",
        "documentation": {}
    },
    {
        "label": "Collection",
        "importPath": "app.models.api.store_admin",
        "description": "app.models.api.store_admin",
        "isExtraImport": true,
        "detail": "app.models.api.store_admin",
        "documentation": {}
    },
    {
        "label": "Product",
        "importPath": "app.models.api.store_admin",
        "description": "app.models.api.store_admin",
        "isExtraImport": true,
        "detail": "app.models.api.store_admin",
        "documentation": {}
    },
    {
        "label": "DATABASE_URL",
        "importPath": "app.config",
        "description": "app.config",
        "isExtraImport": true,
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "HUGGING_FACE_API_KEY",
        "importPath": "app.config",
        "description": "app.config",
        "isExtraImport": true,
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "LANGFUSE_PUBLIC_KEY",
        "importPath": "app.config",
        "description": "app.config",
        "isExtraImport": true,
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "LANGFUSE_SECRET_KEY",
        "importPath": "app.config",
        "description": "app.config",
        "isExtraImport": true,
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "SHOPIFY_API_KEY",
        "importPath": "app.config",
        "description": "app.config",
        "isExtraImport": true,
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "SHOPIFY_API_SECRET",
        "importPath": "app.config",
        "description": "app.config",
        "isExtraImport": true,
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "PINECONE_API_KEY",
        "importPath": "app.config",
        "description": "app.config",
        "isExtraImport": true,
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "FlagModel",
        "importPath": "FlagEmbedding",
        "description": "FlagEmbedding",
        "isExtraImport": true,
        "detail": "FlagEmbedding",
        "documentation": {}
    },
    {
        "label": "pad_vector",
        "importPath": "app.utils.vector_utils",
        "description": "app.utils.vector_utils",
        "isExtraImport": true,
        "detail": "app.utils.vector_utils",
        "documentation": {}
    },
    {
        "label": "InferenceClient",
        "importPath": "huggingface_hub",
        "description": "huggingface_hub",
        "isExtraImport": true,
        "detail": "huggingface_hub",
        "documentation": {}
    },
    {
        "label": "Langfuse",
        "importPath": "langfuse",
        "description": "langfuse",
        "isExtraImport": true,
        "detail": "langfuse",
        "documentation": {}
    },
    {
        "label": "observe",
        "importPath": "langfuse.decorators",
        "description": "langfuse.decorators",
        "isExtraImport": true,
        "detail": "langfuse.decorators",
        "documentation": {}
    },
    {
        "label": "langfuse_tracker",
        "importPath": "app.external_service.langfuse_observations",
        "description": "app.external_service.langfuse_observations",
        "isExtraImport": true,
        "detail": "app.external_service.langfuse_observations",
        "documentation": {}
    },
    {
        "label": "langfuse_tracker",
        "importPath": "app.external_service.langfuse_observations",
        "description": "app.external_service.langfuse_observations",
        "isExtraImport": true,
        "detail": "app.external_service.langfuse_observations",
        "documentation": {}
    },
    {
        "label": "functools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "functools",
        "description": "functools",
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "wraps",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "get_shopify_auth",
        "importPath": "app.utils.auth",
        "description": "app.utils.auth",
        "isExtraImport": true,
        "detail": "app.utils.auth",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "require_auth",
        "importPath": "app.middleware.auth",
        "description": "app.middleware.auth",
        "isExtraImport": true,
        "detail": "app.middleware.auth",
        "documentation": {}
    },
    {
        "label": "RagPipelineService",
        "importPath": "app.services.rag_pipeline_service",
        "description": "app.services.rag_pipeline_service",
        "isExtraImport": true,
        "detail": "app.services.rag_pipeline_service",
        "documentation": {}
    },
    {
        "label": "RagPipelineService",
        "importPath": "app.services.rag_pipeline_service",
        "description": "app.services.rag_pipeline_service",
        "isExtraImport": true,
        "detail": "app.services.rag_pipeline_service",
        "documentation": {}
    },
    {
        "label": "StoreAdminService",
        "importPath": "app.services.store_admin_service",
        "description": "app.services.store_admin_service",
        "isExtraImport": true,
        "detail": "app.services.store_admin_service",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "create_prompt",
        "importPath": "app.utils.prompt",
        "description": "app.utils.prompt",
        "isExtraImport": true,
        "detail": "app.utils.prompt",
        "documentation": {}
    },
    {
        "label": "create_prompt",
        "importPath": "app.utils.prompt",
        "description": "app.utils.prompt",
        "isExtraImport": true,
        "detail": "app.utils.prompt",
        "documentation": {}
    },
    {
        "label": "RagPipelineHandler",
        "importPath": "app.dbhandlers.rag_pipeline_handler",
        "description": "app.dbhandlers.rag_pipeline_handler",
        "isExtraImport": true,
        "detail": "app.dbhandlers.rag_pipeline_handler",
        "documentation": {}
    },
    {
        "label": "track_llm_interaction",
        "importPath": "app.external_service.langfuse_tracker",
        "description": "app.external_service.langfuse_tracker",
        "isExtraImport": true,
        "detail": "app.external_service.langfuse_tracker",
        "documentation": {}
    },
    {
        "label": "generate_embeddings",
        "importPath": "app.external_service.generate_embeddings",
        "description": "app.external_service.generate_embeddings",
        "isExtraImport": true,
        "detail": "app.external_service.generate_embeddings",
        "documentation": {}
    },
    {
        "label": "generate_text_from_huggingface",
        "importPath": "app.external_service.hugging_face_api",
        "description": "app.external_service.hugging_face_api",
        "isExtraImport": true,
        "detail": "app.external_service.hugging_face_api",
        "documentation": {}
    },
    {
        "label": "clean_response_from_llm",
        "importPath": "app.utils.rag_pipeline_utils",
        "description": "app.utils.rag_pipeline_utils",
        "isExtraImport": true,
        "detail": "app.utils.rag_pipeline_utils",
        "documentation": {}
    },
    {
        "label": "extract_products_from_response",
        "importPath": "app.utils.rag_pipeline_utils",
        "description": "app.utils.rag_pipeline_utils",
        "isExtraImport": true,
        "detail": "app.utils.rag_pipeline_utils",
        "documentation": {}
    },
    {
        "label": "extract_user_message_from_prompt",
        "importPath": "app.utils.rag_pipeline_utils",
        "description": "app.utils.rag_pipeline_utils",
        "isExtraImport": true,
        "detail": "app.utils.rag_pipeline_utils",
        "documentation": {}
    },
    {
        "label": "format_context_texts",
        "importPath": "app.utils.rag_pipeline_utils",
        "description": "app.utils.rag_pipeline_utils",
        "isExtraImport": true,
        "detail": "app.utils.rag_pipeline_utils",
        "documentation": {}
    },
    {
        "label": "filter_products_for_display",
        "importPath": "app.utils.rag_pipeline_utils",
        "description": "app.utils.rag_pipeline_utils",
        "isExtraImport": true,
        "detail": "app.utils.rag_pipeline_utils",
        "documentation": {}
    },
    {
        "label": "is_product_query",
        "importPath": "app.utils.rag_pipeline_utils",
        "description": "app.utils.rag_pipeline_utils",
        "isExtraImport": true,
        "detail": "app.utils.rag_pipeline_utils",
        "documentation": {}
    },
    {
        "label": "StoreAdminHandler",
        "importPath": "app.dbhandlers.store_admin_handler",
        "description": "app.dbhandlers.store_admin_handler",
        "isExtraImport": true,
        "detail": "app.dbhandlers.store_admin_handler",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jwt",
        "description": "jwt",
        "detail": "jwt",
        "documentation": {}
    },
    {
        "label": "JWTError",
        "importPath": "jose.exceptions",
        "description": "jose.exceptions",
        "isExtraImport": true,
        "detail": "jose.exceptions",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "UTC",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "verify_app_proxy_signature",
        "importPath": "app.utils.shopify_proxy_utils",
        "description": "app.utils.shopify_proxy_utils",
        "isExtraImport": true,
        "detail": "app.utils.shopify_proxy_utils",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "hmac",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hmac",
        "description": "hmac",
        "detail": "hmac",
        "documentation": {}
    },
    {
        "label": "Pinecone",
        "importPath": "pinecone",
        "description": "pinecone",
        "isExtraImport": true,
        "detail": "pinecone",
        "documentation": {}
    },
    {
        "label": "uvicorn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uvicorn",
        "description": "uvicorn",
        "detail": "uvicorn",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "create_app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "shopify",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shopify",
        "description": "shopify",
        "detail": "shopify",
        "documentation": {}
    },
    {
        "label": "code",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "code",
        "description": "code",
        "detail": "code",
        "documentation": {}
    },
    {
        "label": "os.path",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.path",
        "description": "os.path",
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "glob",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "glob",
        "description": "glob",
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "yaml",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "yaml",
        "description": "yaml",
        "detail": "yaml",
        "documentation": {}
    },
    {
        "label": "six",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "six",
        "description": "six",
        "detail": "six",
        "documentation": {}
    },
    {
        "label": "input",
        "importPath": "six.moves",
        "description": "six.moves",
        "isExtraImport": true,
        "detail": "six.moves",
        "documentation": {}
    },
    {
        "label": "map",
        "importPath": "six.moves",
        "description": "six.moves",
        "isExtraImport": true,
        "detail": "six.moves",
        "documentation": {}
    },
    {
        "label": "RagPipelineHandler",
        "kind": 6,
        "importPath": "app.dbhandlers.rag_pipeline_handler",
        "description": "app.dbhandlers.rag_pipeline_handler",
        "peekOfCode": "class RagPipelineHandler:\n    \"\"\"Handles embedding storage and querying.\"\"\"\n    def __init__(self):\n        self.index = PC.Index(PC_INDEX_NAME)\n    async def store_embeddings(\n        self, embeddings: List[ProductEmbedding], namespace: Optional[str]\n    ) -> None:\n        \"\"\"Stores embeddings in the index.\"\"\"\n        vectors = [\n            {",
        "detail": "app.dbhandlers.rag_pipeline_handler",
        "documentation": {}
    },
    {
        "label": "StoreAdminHandler",
        "kind": 6,
        "importPath": "app.dbhandlers.store_admin_handler",
        "description": "app.dbhandlers.store_admin_handler",
        "peekOfCode": "class StoreAdminHandler:\n    def __init__(self):\n        database_url = DATABASE_URL\n        print(f\"DATABASE URL: {database_url}\")\n        if not database_url:\n            raise ValueError(\"Database URL must be provided in the environment variables.\")\n        self.engine = create_engine(database_url)\n        self.Session = sessionmaker(bind=self.engine)\n        Base.metadata.create_all(self.engine)\n    async def get_color_preference(self, shop_id: str) -> Optional[str]:",
        "detail": "app.dbhandlers.store_admin_handler",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "app.external_service.generate_embeddings",
        "description": "app.external_service.generate_embeddings",
        "peekOfCode": "model = FlagModel(\n    'BAAI/bge-small-en-v1.5',\n    query_instruction_for_retrieval=\"Represent this sentence for searching relevant passages:\",\n    use_fp16=False \n)\nasync def generate_embeddings(text: str) -> List[float]:\n    embeddings = model.encode(text)\n    embeddings = np.array(embeddings)\n    norm = np.linalg.norm(embeddings)\n    if norm > 0:",
        "detail": "app.external_service.generate_embeddings",
        "documentation": {}
    },
    {
        "label": "LangfuseTracker",
        "kind": 6,
        "importPath": "app.external_service.langfuse_observations",
        "description": "app.external_service.langfuse_observations",
        "peekOfCode": "class LangfuseTracker:\n    _instance = None\n    def __new__(cls):\n        if not cls._instance:\n            cls._instance = super().__new__(cls)\n            cls._instance._initialize()\n        return cls._instance\n    def _initialize(self):\n        try:\n            self.client = Langfuse(",
        "detail": "app.external_service.langfuse_observations",
        "documentation": {}
    },
    {
        "label": "langfuse_tracker",
        "kind": 5,
        "importPath": "app.external_service.langfuse_observations",
        "description": "app.external_service.langfuse_observations",
        "peekOfCode": "langfuse_tracker = LangfuseTracker()",
        "detail": "app.external_service.langfuse_observations",
        "documentation": {}
    },
    {
        "label": "track_llm_interaction",
        "kind": 2,
        "importPath": "app.external_service.langfuse_tracker",
        "description": "app.external_service.langfuse_tracker",
        "peekOfCode": "def track_llm_interaction(prompt: str, response: str, user_message: str):\n    token_efficiency = langfuse_tracker.calculate_token_efficiency(response)\n    langfuse_tracker.track_llm_interaction(\n        prompt=prompt, \n        response=response, \n        metadata={\n            \"user_message\": user_message,\n            \"token_efficiency\": token_efficiency\n        }\n    )",
        "detail": "app.external_service.langfuse_tracker",
        "documentation": {}
    },
    {
        "label": "require_auth",
        "kind": 2,
        "importPath": "app.middleware.auth",
        "description": "app.middleware.auth",
        "peekOfCode": "def require_auth(func):\n    \"\"\"Decorator to enforce Shopify authentication.\"\"\"\n    @wraps(func)\n    async def wrapper(request: Request, *args, **kwargs):\n        shop_auth = await get_shopify_auth(request)\n        # Attach auth details to the request\n        request.shop = shop_auth  \n        return await func(request, *args, **kwargs)\n    return wrapper",
        "detail": "app.middleware.auth",
        "documentation": {}
    },
    {
        "label": "Data",
        "kind": 6,
        "importPath": "app.models.api.database",
        "description": "app.models.api.database",
        "peekOfCode": "class Data(Base):\n    __tablename__ = 'data'\n    shop_id = Column(String, primary_key=True)\n    color = Column(String)\nclass DBCollection(Base):\n    __tablename__ = 'collections'\n    id = Column(Integer, primary_key=True)\n    title = Column(String, unique=True)\n    products_count = Column(Integer)\n    products = relationship(\"DBProduct\", back_populates=\"collection\")",
        "detail": "app.models.api.database",
        "documentation": {}
    },
    {
        "label": "DBCollection",
        "kind": 6,
        "importPath": "app.models.api.database",
        "description": "app.models.api.database",
        "peekOfCode": "class DBCollection(Base):\n    __tablename__ = 'collections'\n    id = Column(Integer, primary_key=True)\n    title = Column(String, unique=True)\n    products_count = Column(Integer)\n    products = relationship(\"DBProduct\", back_populates=\"collection\")\nclass DBProduct(Base):\n    __tablename__ = 'products'\n    __table_args__ = (\n        UniqueConstraint('title', 'category', name='uq_title_category'),",
        "detail": "app.models.api.database",
        "documentation": {}
    },
    {
        "label": "DBProduct",
        "kind": 6,
        "importPath": "app.models.api.database",
        "description": "app.models.api.database",
        "peekOfCode": "class DBProduct(Base):\n    __tablename__ = 'products'\n    __table_args__ = (\n        UniqueConstraint('title', 'category', name='uq_title_category'),\n        {'sqlite_autoincrement': True, 'extend_existing': True}\n    )\n    id = Column(Integer, primary_key=True)\n    title = Column(String)\n    description = Column(String)\n    category = Column(String)",
        "detail": "app.models.api.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "app.models.api.database",
        "description": "app.models.api.database",
        "peekOfCode": "Base = declarative_base()\nclass Data(Base):\n    __tablename__ = 'data'\n    shop_id = Column(String, primary_key=True)\n    color = Column(String)\nclass DBCollection(Base):\n    __tablename__ = 'collections'\n    id = Column(Integer, primary_key=True)\n    title = Column(String, unique=True)\n    products_count = Column(Integer)",
        "detail": "app.models.api.database",
        "documentation": {}
    },
    {
        "label": "RagPipelineRequestBody",
        "kind": 6,
        "importPath": "app.models.api.rag_pipeline",
        "description": "app.models.api.rag_pipeline",
        "peekOfCode": "class RagPipelineRequestBody(BaseModel):\n    messages: Optional[List[Dict[str, str]]] = None\n    isTrainingPage: Optional[bool] = False\n    shopifyStore: Optional[str] = None\n    shopifyAccessToken: Optional[str] = None\n# Response Model\nclass RagPipelineResponse(BaseModel):\n    answer: str\n    products: Optional[List[Dict[str, str]]] = []\n    categories: Optional[List[str]] = []",
        "detail": "app.models.api.rag_pipeline",
        "documentation": {}
    },
    {
        "label": "RagPipelineResponse",
        "kind": 6,
        "importPath": "app.models.api.rag_pipeline",
        "description": "app.models.api.rag_pipeline",
        "peekOfCode": "class RagPipelineResponse(BaseModel):\n    answer: str\n    products: Optional[List[Dict[str, str]]] = []\n    categories: Optional[List[str]] = []\n# Error Response Model\nclass ErrorResponse(BaseModel):\n    message: str\n    success: bool\nclass ProductEmbedding(BaseModel):\n    id: str",
        "detail": "app.models.api.rag_pipeline",
        "documentation": {}
    },
    {
        "label": "ErrorResponse",
        "kind": 6,
        "importPath": "app.models.api.rag_pipeline",
        "description": "app.models.api.rag_pipeline",
        "peekOfCode": "class ErrorResponse(BaseModel):\n    message: str\n    success: bool\nclass ProductEmbedding(BaseModel):\n    id: str\n    values: List[float]\n    metadata: Dict[str, Any]\nclass VectorMetadata(BaseModel):\n    text: str\n    title: str",
        "detail": "app.models.api.rag_pipeline",
        "documentation": {}
    },
    {
        "label": "ProductEmbedding",
        "kind": 6,
        "importPath": "app.models.api.rag_pipeline",
        "description": "app.models.api.rag_pipeline",
        "peekOfCode": "class ProductEmbedding(BaseModel):\n    id: str\n    values: List[float]\n    metadata: Dict[str, Any]\nclass VectorMetadata(BaseModel):\n    text: str\n    title: str\n    description: str\n    category: str\n    url: str",
        "detail": "app.models.api.rag_pipeline",
        "documentation": {}
    },
    {
        "label": "VectorMetadata",
        "kind": 6,
        "importPath": "app.models.api.rag_pipeline",
        "description": "app.models.api.rag_pipeline",
        "peekOfCode": "class VectorMetadata(BaseModel):\n    text: str\n    title: str\n    description: str\n    category: str\n    url: str\n    image: str\n    price: str\nclass Vector(BaseModel):\n    id: str",
        "detail": "app.models.api.rag_pipeline",
        "documentation": {}
    },
    {
        "label": "Vector",
        "kind": 6,
        "importPath": "app.models.api.rag_pipeline",
        "description": "app.models.api.rag_pipeline",
        "peekOfCode": "class Vector(BaseModel):\n    id: str\n    values: List[float]\n    metadata: VectorMetadata\nclass LLMResponse(BaseModel):\n    response: str\n    products: Optional[List[Dict[str, Any]]] = None\n    categories: Optional[List[Dict[str, Any]]] = None",
        "detail": "app.models.api.rag_pipeline",
        "documentation": {}
    },
    {
        "label": "LLMResponse",
        "kind": 6,
        "importPath": "app.models.api.rag_pipeline",
        "description": "app.models.api.rag_pipeline",
        "peekOfCode": "class LLMResponse(BaseModel):\n    response: str\n    products: Optional[List[Dict[str, Any]]] = None\n    categories: Optional[List[Dict[str, Any]]] = None",
        "detail": "app.models.api.rag_pipeline",
        "documentation": {}
    },
    {
        "label": "ErrorResponse",
        "kind": 6,
        "importPath": "app.models.api.store_admin",
        "description": "app.models.api.store_admin",
        "peekOfCode": "class ErrorResponse(BaseModel):\n    message: str\n    success: bool\nclass ColorPreferenceResponse(BaseModel):\n    color: Optional[str]\nclass CollectionRequest(BaseModel):\n    title: str\n    products_count: int\nclass CollectionResponse(BaseModel):\n    message: str",
        "detail": "app.models.api.store_admin",
        "documentation": {}
    },
    {
        "label": "ColorPreferenceResponse",
        "kind": 6,
        "importPath": "app.models.api.store_admin",
        "description": "app.models.api.store_admin",
        "peekOfCode": "class ColorPreferenceResponse(BaseModel):\n    color: Optional[str]\nclass CollectionRequest(BaseModel):\n    title: str\n    products_count: int\nclass CollectionResponse(BaseModel):\n    message: str\n    data: List[CollectionRequest]\nclass ProductRequest(BaseModel):\n    title: str",
        "detail": "app.models.api.store_admin",
        "documentation": {}
    },
    {
        "label": "CollectionRequest",
        "kind": 6,
        "importPath": "app.models.api.store_admin",
        "description": "app.models.api.store_admin",
        "peekOfCode": "class CollectionRequest(BaseModel):\n    title: str\n    products_count: int\nclass CollectionResponse(BaseModel):\n    message: str\n    data: List[CollectionRequest]\nclass ProductRequest(BaseModel):\n    title: str\n    description: Optional[str] = None\n    category: str",
        "detail": "app.models.api.store_admin",
        "documentation": {}
    },
    {
        "label": "CollectionResponse",
        "kind": 6,
        "importPath": "app.models.api.store_admin",
        "description": "app.models.api.store_admin",
        "peekOfCode": "class CollectionResponse(BaseModel):\n    message: str\n    data: List[CollectionRequest]\nclass ProductRequest(BaseModel):\n    title: str\n    description: Optional[str] = None\n    category: str\n    url: Optional[str] = None\n    price: Optional[float] = None\n    image: Optional[str] = None",
        "detail": "app.models.api.store_admin",
        "documentation": {}
    },
    {
        "label": "ProductRequest",
        "kind": 6,
        "importPath": "app.models.api.store_admin",
        "description": "app.models.api.store_admin",
        "peekOfCode": "class ProductRequest(BaseModel):\n    title: str\n    description: Optional[str] = None\n    category: str\n    url: Optional[str] = None\n    price: Optional[float] = None\n    image: Optional[str] = None\nclass StoreProductsRequest(BaseModel):\n    products: List[ProductRequest]\n    collection_id_map: Dict[str, int]",
        "detail": "app.models.api.store_admin",
        "documentation": {}
    },
    {
        "label": "StoreProductsRequest",
        "kind": 6,
        "importPath": "app.models.api.store_admin",
        "description": "app.models.api.store_admin",
        "peekOfCode": "class StoreProductsRequest(BaseModel):\n    products: List[ProductRequest]\n    collection_id_map: Dict[str, int]\nclass StoreProductsResponse(BaseModel):\n    message: str\nclass Collection(BaseModel):\n    id: str\n    title: str\n    products_count: int\n    class Config:",
        "detail": "app.models.api.store_admin",
        "documentation": {}
    },
    {
        "label": "StoreProductsResponse",
        "kind": 6,
        "importPath": "app.models.api.store_admin",
        "description": "app.models.api.store_admin",
        "peekOfCode": "class StoreProductsResponse(BaseModel):\n    message: str\nclass Collection(BaseModel):\n    id: str\n    title: str\n    products_count: int\n    class Config:\n        populate_by_name = True\nclass Product(BaseModel):\n    id: str",
        "detail": "app.models.api.store_admin",
        "documentation": {}
    },
    {
        "label": "Collection",
        "kind": 6,
        "importPath": "app.models.api.store_admin",
        "description": "app.models.api.store_admin",
        "peekOfCode": "class Collection(BaseModel):\n    id: str\n    title: str\n    products_count: int\n    class Config:\n        populate_by_name = True\nclass Product(BaseModel):\n    id: str\n    title: str\n    description: Optional[str]",
        "detail": "app.models.api.store_admin",
        "documentation": {}
    },
    {
        "label": "Product",
        "kind": 6,
        "importPath": "app.models.api.store_admin",
        "description": "app.models.api.store_admin",
        "peekOfCode": "class Product(BaseModel):\n    id: str\n    title: str\n    description: Optional[str]\n    category: str\n    url: Optional[str]\n    price: str\n    image: str = Field(default=\"\")",
        "detail": "app.models.api.store_admin",
        "documentation": {}
    },
    {
        "label": "Data",
        "kind": 6,
        "importPath": "app.models.api.store_models",
        "description": "app.models.api.store_models",
        "peekOfCode": "class Data(Base):\n    __tablename__ = 'data'\n    shop_id = Column(String, primary_key=True)\n    color = Column(String)\nclass Collection(Base):\n    __tablename__ = 'collections'\n    id = Column(Integer, primary_key=True)\n    title = Column(String, unique=True)\n    products_count = Column(Integer)\n    products = relationship(\"Product\", back_populates=\"collection\")",
        "detail": "app.models.api.store_models",
        "documentation": {}
    },
    {
        "label": "Collection",
        "kind": 6,
        "importPath": "app.models.api.store_models",
        "description": "app.models.api.store_models",
        "peekOfCode": "class Collection(Base):\n    __tablename__ = 'collections'\n    id = Column(Integer, primary_key=True)\n    title = Column(String, unique=True)\n    products_count = Column(Integer)\n    products = relationship(\"Product\", back_populates=\"collection\")\nclass Product(Base):\n    __tablename__ = 'products'\n    id = Column(Integer, primary_key=True)\n    title = Column(String)",
        "detail": "app.models.api.store_models",
        "documentation": {}
    },
    {
        "label": "Product",
        "kind": 6,
        "importPath": "app.models.api.store_models",
        "description": "app.models.api.store_models",
        "peekOfCode": "class Product(Base):\n    __tablename__ = 'products'\n    id = Column(Integer, primary_key=True)\n    title = Column(String)\n    description = Column(String)\n    category = Column(String)\n    url = Column(String)\n    price = Column(Float)\n    image = Column(String)\n    collection_id = Column(Integer, ForeignKey('collections.id'))",
        "detail": "app.models.api.store_models",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "app.models.api.store_models",
        "description": "app.models.api.store_models",
        "peekOfCode": "Base = declarative_base()\nclass Data(Base):\n    __tablename__ = 'data'\n    shop_id = Column(String, primary_key=True)\n    color = Column(String)\nclass Collection(Base):\n    __tablename__ = 'collections'\n    id = Column(Integer, primary_key=True)\n    title = Column(String, unique=True)\n    products_count = Column(Integer)",
        "detail": "app.models.api.store_models",
        "documentation": {}
    },
    {
        "label": "rag_pipeline_router",
        "kind": 5,
        "importPath": "app.routes.rag_pipeline",
        "description": "app.routes.rag_pipeline",
        "peekOfCode": "rag_pipeline_router = APIRouter(prefix=\"/rag-pipeline\", tags=[\"rag\",\"pipeline\"])\n@rag_pipeline_router.post(\n    \"/conversation\",\n    summary=\"Process RAG pipeline conversation request\",\n    response_model=RagPipelineResponse,\n    responses={\n        400: {\"model\": ErrorResponse, \"description\": \"Invalid request\"},\n        401: {\"model\": ErrorResponse, \"description\": \"Unauthorized access\"},\n        500: {\"model\": ErrorResponse, \"description\": \"Internal server error\"},\n    },",
        "detail": "app.routes.rag_pipeline",
        "documentation": {}
    },
    {
        "label": "store_admin_router",
        "kind": 5,
        "importPath": "app.routes.store_admin",
        "description": "app.routes.store_admin",
        "peekOfCode": "store_admin_router = APIRouter(prefix=\"/store-admin\", tags=[\"store\", \"admin\"])\n@store_admin_router.get(\n    \"/color-preference\",\n    summary=\"Color preference for shopify store admin\",\n    response_model=ColorPreferenceResponse,\n    responses={\n        400: {\"model\": ErrorResponse, \"description\": \"Invalid request\"},\n        401: {\"model\": ErrorResponse, \"description\": \"Unauthorized access\"},\n        500: {\"model\": ErrorResponse, \"description\": \"Internal server error\"},\n    },",
        "detail": "app.routes.store_admin",
        "documentation": {}
    },
    {
        "label": "project_root",
        "kind": 5,
        "importPath": "app.scripts.langfuse_runner",
        "description": "app.scripts.langfuse_runner",
        "peekOfCode": "project_root = Path(__file__).parent.parent.parent\nsys.path.append(str(project_root))\nload_dotenv()\nrag_service = RagPipelineService()\nasync def run_langfuse_tracking():\n    products = [\n        {\n            \"id\": \"1\",\n            \"title\": \"Snowboard Pro X\",\n            \"price\": 299.99,",
        "detail": "app.scripts.langfuse_runner",
        "documentation": {}
    },
    {
        "label": "rag_service",
        "kind": 5,
        "importPath": "app.scripts.langfuse_runner",
        "description": "app.scripts.langfuse_runner",
        "peekOfCode": "rag_service = RagPipelineService()\nasync def run_langfuse_tracking():\n    products = [\n        {\n            \"id\": \"1\",\n            \"title\": \"Snowboard Pro X\",\n            \"price\": 299.99,\n            \"url\": \"https://example.com/snowboard\",\n            \"image\": \"snowboard.jpg\",\n            \"product\": \"Snowboard\"",
        "detail": "app.scripts.langfuse_runner",
        "documentation": {}
    },
    {
        "label": "RagPipelineService",
        "kind": 6,
        "importPath": "app.services.rag_pipeline_service",
        "description": "app.services.rag_pipeline_service",
        "peekOfCode": "class RagPipelineService:\n    def __init__(self):\n        self.rag_handler = RagPipelineHandler()\n    async def conversation(self, namespace: str, contents: str) -> Dict[str, Any]:\n        \"\"\"Handles conversation flow by generating embeddings, querying vector db, and fetching LLM response.\"\"\"\n        try:\n            if not contents:\n                raise HTTPException(\n                    status_code=400, detail=\"Messages are required for chat requests\"\n                )",
        "detail": "app.services.rag_pipeline_service",
        "documentation": {}
    },
    {
        "label": "StoreAdminService",
        "kind": 6,
        "importPath": "app.services.store_admin_service",
        "description": "app.services.store_admin_service",
        "peekOfCode": "class StoreAdminService:\n    def __init__(self):\n        self.db_handler = StoreAdminHandler()\n    async def get_color_preference(self, shop_id: str) -> Optional[str]:\n        \"\"\"Fetch color preference from DB via handler.\"\"\"\n        return await self.db_handler.get_color_preference(shop_id)\n    async def store_collections(self, collections: List[Collection]) -> List[dict]:\n        \"\"\"Convert collections to DB format and store.\"\"\"\n        formatted_collections = [\n            {",
        "detail": "app.services.store_admin_service",
        "documentation": {}
    },
    {
        "label": "extract_token",
        "kind": 2,
        "importPath": "app.utils.auth",
        "description": "app.utils.auth",
        "peekOfCode": "def extract_token(authorization: str):\n    \"\"\"Extract the token from the authorization header.\"\"\"\n    try:\n        _, token = authorization.split(\" \")\n        return token\n    except ValueError:\n        raise HTTPException(status_code=400, detail=\"Invalid Authorization header format\")\ndef validate_token(token: str, shop_domain: str):\n    \"\"\"Decode and validate the Shopify token.\"\"\"\n    try:",
        "detail": "app.utils.auth",
        "documentation": {}
    },
    {
        "label": "validate_token",
        "kind": 2,
        "importPath": "app.utils.auth",
        "description": "app.utils.auth",
        "peekOfCode": "def validate_token(token: str, shop_domain: str):\n    \"\"\"Decode and validate the Shopify token.\"\"\"\n    try:\n        token_payload = jwt.decode(\n            token, \n            SHOPIFY_API_SECRET, \n            algorithms=[\"HS256\"],\n            audience=SHOPIFY_API_KEY\n        )\n        if is_missing_required_claims(token_payload):",
        "detail": "app.utils.auth",
        "documentation": {}
    },
    {
        "label": "is_missing_required_claims",
        "kind": 2,
        "importPath": "app.utils.auth",
        "description": "app.utils.auth",
        "peekOfCode": "def is_missing_required_claims(decoded):\n    required_claims = ['dest', 'exp', 'iss', 'sub', 'nbf', 'iat']\n    return not all(claim in decoded for claim in required_claims)",
        "detail": "app.utils.auth",
        "documentation": {}
    },
    {
        "label": "create_prompt",
        "kind": 2,
        "importPath": "app.utils.prompt",
        "description": "app.utils.prompt",
        "peekOfCode": "def create_prompt(user_message: str, context_texts: Optional[str] = None) -> str:\n    return f\"\"\"\n        You are an expert Shopify assistant. Based on the user query and the retrieved store data, provide a    concise, accurate, and structured response. If the query is unclear or data is missing, say: [Unable to answer due to insufficient information]. Redirect ALL conversations to product queries.\n        Your responses must be:\n        - Concise (1-2 sentences max for greetings, 3-5 bullet points for products)\n        - Strictly product-focused\n        - NEVER explain your thought process\n        - Free of repetition\n        - Zero internal reasoning\n        - No self-references (\"I\", \"we\")",
        "detail": "app.utils.prompt",
        "documentation": {}
    },
    {
        "label": "extract_products_from_response",
        "kind": 2,
        "importPath": "app.utils.rag_pipeline_utils",
        "description": "app.utils.rag_pipeline_utils",
        "peekOfCode": "def extract_products_from_response(query_results: List[Any]) -> List[Dict[str, Any]]:\n    \"\"\"Extracts and filters products from query results.\"\"\"\n    products = [\n        {\n            \"id\": result.id,\n            \"title\": result.metadata.title,\n            \"price\": result.metadata.price,\n            \"url\": result.metadata.url,\n            \"image\": result.metadata.image,\n            \"category\": getattr(result.metadata, \"category\", \"None\"),",
        "detail": "app.utils.rag_pipeline_utils",
        "documentation": {}
    },
    {
        "label": "format_context_texts",
        "kind": 2,
        "importPath": "app.utils.rag_pipeline_utils",
        "description": "app.utils.rag_pipeline_utils",
        "peekOfCode": "def format_context_texts(query_results: List[Any]) -> str:\n    \"\"\"Formats context texts from query results.\"\"\"\n    return \"\\n\".join(\n        f\"Product: Title: {result.metadata.title}, Description: {result.metadata.description}, \"\n        f\"Category: {result.metadata.category}, Price: {result.metadata.price}.\"\n        for result in query_results\n        if result and result.metadata\n    )\ndef clean_response_from_llm(response: str) -> str:\n    cleaned_response = response",
        "detail": "app.utils.rag_pipeline_utils",
        "documentation": {}
    },
    {
        "label": "clean_response_from_llm",
        "kind": 2,
        "importPath": "app.utils.rag_pipeline_utils",
        "description": "app.utils.rag_pipeline_utils",
        "peekOfCode": "def clean_response_from_llm(response: str) -> str:\n    cleaned_response = response\n    cleaned_response = re.sub(\n        r\"<\\/?think>|<\\/?reasoning>\", \"\", cleaned_response, flags=re.IGNORECASE\n    )\n    cleaned_response = re.sub(\n        r\"^\\s*\\n\", \"\", cleaned_response, flags=re.MULTILINE\n    ).strip()\n    if \"</think>\" in cleaned_response or len(cleaned_response) > 300:\n        last_paragraph = (",
        "detail": "app.utils.rag_pipeline_utils",
        "documentation": {}
    },
    {
        "label": "extract_user_message_from_prompt",
        "kind": 2,
        "importPath": "app.utils.rag_pipeline_utils",
        "description": "app.utils.rag_pipeline_utils",
        "peekOfCode": "def extract_user_message_from_prompt(prompt: str) -> str:\n    \"\"\"\n    Extracts the user message from the prompt.\n    If the prompt contains 'Question:', it extracts the content after it.\n    Otherwise, returns the original prompt.\n    \"\"\"\n    user_message_match = re.search(r\"Question:\\s*(.*?)(?:\\n|$)\", prompt)\n    return user_message_match.group(1) if user_message_match else prompt\ndef is_product_query(user_message: str, products: List[Dict]) -> bool:\n    \"\"\"",
        "detail": "app.utils.rag_pipeline_utils",
        "documentation": {}
    },
    {
        "label": "is_product_query",
        "kind": 2,
        "importPath": "app.utils.rag_pipeline_utils",
        "description": "app.utils.rag_pipeline_utils",
        "peekOfCode": "def is_product_query(user_message: str, products: List[Dict]) -> bool:\n    \"\"\"\n    Checks if the user message indicates a product-related query.\n    \"\"\"\n    lower_user_message = user_message.lower()\n    # Check for common product-related phrases\n    if any(\n        phrase in lower_user_message\n        for phrase in [\"product\", \"show me\", \"list\", \"items\"]\n    ):",
        "detail": "app.utils.rag_pipeline_utils",
        "documentation": {}
    },
    {
        "label": "filter_products_for_display",
        "kind": 2,
        "importPath": "app.utils.rag_pipeline_utils",
        "description": "app.utils.rag_pipeline_utils",
        "peekOfCode": "def filter_products_for_display(products: List[Dict], user_message: str) -> List[Dict]:\n    lower_user_message = user_message.lower()\n    transformed_products = []\n    for product in products:\n        include = False\n        if \"show\" in lower_user_message or \"list\" in lower_user_message:\n            include = True\n        else:\n            product_name = product[\"title\"].lower().strip()\n            include = product_name in lower_user_message",
        "detail": "app.utils.rag_pipeline_utils",
        "documentation": {}
    },
    {
        "label": "verify_app_proxy_signature",
        "kind": 2,
        "importPath": "app.utils.shopify_proxy_utils",
        "description": "app.utils.shopify_proxy_utils",
        "peekOfCode": "def verify_app_proxy_signature(query_params: dict, api_secret: str) -> bool:\n    signature = query_params.get(\"signature\")\n    if not signature:\n        return False\n    params = {k: v for k, v in query_params.items() if k != \"signature\"}\n    sorted_params = dict(sorted(params.items()))\n    signature_message = \"&\".join(f\"{k}={v}\" for k, v in sorted_params.items())\n    calculated_hmac = hmac.new(\n        api_secret.encode('utf-8'),\n        signature_message.encode('utf-8'),",
        "detail": "app.utils.shopify_proxy_utils",
        "documentation": {}
    },
    {
        "label": "pad_vector",
        "kind": 2,
        "importPath": "app.utils.vector_utils",
        "description": "app.utils.vector_utils",
        "peekOfCode": "def pad_vector(vector: List[float], target_dimension: int) -> List[float]:\n    if len(vector) >= target_dimension:\n        return vector[:target_dimension]\n    return vector + [0.0] * (target_dimension - len(vector))",
        "detail": "app.utils.vector_utils",
        "documentation": {}
    },
    {
        "label": "PINECONE_API_KEY",
        "kind": 5,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "PINECONE_API_KEY = os.environ[\"PINECONE_API_KEY\"]\nHUGGING_FACE_API_KEY = os.getenv(\"HUGGING_FACE_API_KEY\")\n#Langfuse\nLANGFUSE_PUBLIC_KEY = os.getenv(\"LANGFUSE_PUBLIC_KEY\")\nLANGFUSE_SECRET_KEY = os.getenv(\"LANGFUSE_SECRET_KEY\")\n#Shopify\nSHOPIFY_API_SECRET = os.getenv(\"SHOPIFY_API_SECRET\")\nSHOPIFY_API_KEY = os.getenv(\"SHOPIFY_API_KEY\")\n#Supabase\nSUPABASE_URL = os.getenv(\"SUPABASE_URL\")",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "HUGGING_FACE_API_KEY",
        "kind": 5,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "HUGGING_FACE_API_KEY = os.getenv(\"HUGGING_FACE_API_KEY\")\n#Langfuse\nLANGFUSE_PUBLIC_KEY = os.getenv(\"LANGFUSE_PUBLIC_KEY\")\nLANGFUSE_SECRET_KEY = os.getenv(\"LANGFUSE_SECRET_KEY\")\n#Shopify\nSHOPIFY_API_SECRET = os.getenv(\"SHOPIFY_API_SECRET\")\nSHOPIFY_API_KEY = os.getenv(\"SHOPIFY_API_KEY\")\n#Supabase\nSUPABASE_URL = os.getenv(\"SUPABASE_URL\")\nSUPABASE_SERVICE_ROLE_KEY = os.getenv(\"SUPABASE_SERVICE_ROLE_KEY\")",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "LANGFUSE_PUBLIC_KEY",
        "kind": 5,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "LANGFUSE_PUBLIC_KEY = os.getenv(\"LANGFUSE_PUBLIC_KEY\")\nLANGFUSE_SECRET_KEY = os.getenv(\"LANGFUSE_SECRET_KEY\")\n#Shopify\nSHOPIFY_API_SECRET = os.getenv(\"SHOPIFY_API_SECRET\")\nSHOPIFY_API_KEY = os.getenv(\"SHOPIFY_API_KEY\")\n#Supabase\nSUPABASE_URL = os.getenv(\"SUPABASE_URL\")\nSUPABASE_SERVICE_ROLE_KEY = os.getenv(\"SUPABASE_SERVICE_ROLE_KEY\")\nDATABASE_URL = os.getenv(\"DATABASE_URL\")",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "LANGFUSE_SECRET_KEY",
        "kind": 5,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "LANGFUSE_SECRET_KEY = os.getenv(\"LANGFUSE_SECRET_KEY\")\n#Shopify\nSHOPIFY_API_SECRET = os.getenv(\"SHOPIFY_API_SECRET\")\nSHOPIFY_API_KEY = os.getenv(\"SHOPIFY_API_KEY\")\n#Supabase\nSUPABASE_URL = os.getenv(\"SUPABASE_URL\")\nSUPABASE_SERVICE_ROLE_KEY = os.getenv(\"SUPABASE_SERVICE_ROLE_KEY\")\nDATABASE_URL = os.getenv(\"DATABASE_URL\")",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "SHOPIFY_API_SECRET",
        "kind": 5,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "SHOPIFY_API_SECRET = os.getenv(\"SHOPIFY_API_SECRET\")\nSHOPIFY_API_KEY = os.getenv(\"SHOPIFY_API_KEY\")\n#Supabase\nSUPABASE_URL = os.getenv(\"SUPABASE_URL\")\nSUPABASE_SERVICE_ROLE_KEY = os.getenv(\"SUPABASE_SERVICE_ROLE_KEY\")\nDATABASE_URL = os.getenv(\"DATABASE_URL\")",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "SHOPIFY_API_KEY",
        "kind": 5,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "SHOPIFY_API_KEY = os.getenv(\"SHOPIFY_API_KEY\")\n#Supabase\nSUPABASE_URL = os.getenv(\"SUPABASE_URL\")\nSUPABASE_SERVICE_ROLE_KEY = os.getenv(\"SUPABASE_SERVICE_ROLE_KEY\")\nDATABASE_URL = os.getenv(\"DATABASE_URL\")",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "SUPABASE_URL",
        "kind": 5,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "SUPABASE_URL = os.getenv(\"SUPABASE_URL\")\nSUPABASE_SERVICE_ROLE_KEY = os.getenv(\"SUPABASE_SERVICE_ROLE_KEY\")\nDATABASE_URL = os.getenv(\"DATABASE_URL\")",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "SUPABASE_SERVICE_ROLE_KEY",
        "kind": 5,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "SUPABASE_SERVICE_ROLE_KEY = os.getenv(\"SUPABASE_SERVICE_ROLE_KEY\")\nDATABASE_URL = os.getenv(\"DATABASE_URL\")",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "DATABASE_URL",
        "kind": 5,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "DATABASE_URL = os.getenv(\"DATABASE_URL\")",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "PC",
        "kind": 5,
        "importPath": "app.constants",
        "description": "app.constants",
        "peekOfCode": "PC = Pinecone(api_key=PINECONE_API_KEY)\nPC_INDEX_NAME = 'chatbot'\nLANGFUSE_HOST  = \"https://cloud.langfuse.com\"",
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "PC_INDEX_NAME",
        "kind": 5,
        "importPath": "app.constants",
        "description": "app.constants",
        "peekOfCode": "PC_INDEX_NAME = 'chatbot'\nLANGFUSE_HOST  = \"https://cloud.langfuse.com\"",
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "CustmFastAPI",
        "kind": 6,
        "importPath": "app.custom_fastapi",
        "description": "app.custom_fastapi",
        "peekOfCode": "class CustmFastAPI(FastAPI):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        from app.services.rag_pipeline_service import RagPipelineService\n        from app.services.store_admin_service import StoreAdminService\n        from app.dbhandlers.store_admin_handler import StoreAdminHandler\n        from app.dbhandlers.rag_pipeline_handler import RagPipelineHandler\n        self.rag_pipeline_service = RagPipelineService()\n        self.store_admin_service = StoreAdminService()\n        self.store_admin_handler = StoreAdminHandler()",
        "detail": "app.custom_fastapi",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "app = create_app()\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\nif __name__ == \"__main__\":\n    uvicorn.run(app, host=\"0.0.0.0\", port=8000)",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "ConfigFileError",
        "kind": 6,
        "importPath": "venv.Scripts.shopify_api",
        "description": "venv.Scripts.shopify_api",
        "peekOfCode": "class ConfigFileError(Exception):\n    pass\ndef usage(usage_string):\n    \"\"\"Decorator to add a usage string to a function\"\"\"\n    def decorate(func):\n        func.usage = usage_string\n        return func\n    return decorate\nclass TasksMeta(type):\n    _prog = os.path.basename(sys.argv[0])",
        "detail": "venv.Scripts.shopify_api",
        "documentation": {}
    },
    {
        "label": "TasksMeta",
        "kind": 6,
        "importPath": "venv.Scripts.shopify_api",
        "description": "venv.Scripts.shopify_api",
        "peekOfCode": "class TasksMeta(type):\n    _prog = os.path.basename(sys.argv[0])\n    def __new__(mcs, name, bases, new_attrs):\n        cls = type.__new__(mcs, name, bases, new_attrs)\n        tasks = list(new_attrs.keys())\n        tasks.append(\"help\")\n        def filter_func(item):\n            return not item.startswith(\"_\") and hasattr(getattr(cls, item), \"__call__\")\n        tasks = filter(filter_func, tasks)\n        cls._tasks = sorted(tasks)",
        "detail": "venv.Scripts.shopify_api",
        "documentation": {}
    },
    {
        "label": "Tasks",
        "kind": 6,
        "importPath": "venv.Scripts.shopify_api",
        "description": "venv.Scripts.shopify_api",
        "peekOfCode": "class Tasks(object):\n    _shop_config_dir = os.path.join(os.environ[\"HOME\"], \".shopify\", \"shops\")\n    _default_symlink = os.path.join(_shop_config_dir, \"default\")\n    _default_api_version = \"unstable\"\n    @classmethod\n    @usage(\"list\")\n    def list(cls):\n        \"\"\"list available connections\"\"\"\n        for c in cls._available_connections():\n            prefix = \" * \" if cls._is_default(c) else \"   \"",
        "detail": "venv.Scripts.shopify_api",
        "documentation": {}
    },
    {
        "label": "start_interpreter",
        "kind": 2,
        "importPath": "venv.Scripts.shopify_api",
        "description": "venv.Scripts.shopify_api",
        "peekOfCode": "def start_interpreter(**variables):\n    # add the current working directory to the sys paths\n    sys.path.append(os.getcwd())\n    try:\n        from IPython import start_ipython\n        from traitlets.config.loader import Config\n        config = Config(TerminalInteractiveShell={\"banner2\": \"(shopify %s)\" % shopify.version.VERSION})\n        start_ipython(argv=[], user_ns=variables, config=config)\n    except ImportError:\n        console = type(\"shopify \" + shopify.version.VERSION, (code.InteractiveConsole, object), {})",
        "detail": "venv.Scripts.shopify_api",
        "documentation": {}
    },
    {
        "label": "usage",
        "kind": 2,
        "importPath": "venv.Scripts.shopify_api",
        "description": "venv.Scripts.shopify_api",
        "peekOfCode": "def usage(usage_string):\n    \"\"\"Decorator to add a usage string to a function\"\"\"\n    def decorate(func):\n        func.usage = usage_string\n        return func\n    return decorate\nclass TasksMeta(type):\n    _prog = os.path.basename(sys.argv[0])\n    def __new__(mcs, name, bases, new_attrs):\n        cls = type.__new__(mcs, name, bases, new_attrs)",
        "detail": "venv.Scripts.shopify_api",
        "documentation": {}
    }
]